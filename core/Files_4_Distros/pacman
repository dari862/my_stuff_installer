#!/bin/sh -e
yay_ver="12.5.0"
network_manager_app_from_Files_4_Distros="networkmanager"

if [ -z "$PACKAGER" ];then
	PACKAGER="pacman"
else
	if command_exist yay; then
        PACKAGER="yay"
    fi
fi

__remove_package="pacman -Rns --noconfirm"
packages_to_install_pacman=""
packages_to_install_AUR=""
yay_package_name=""

clean_pacman_db_locl_file(){
	if [ -f "/var/lib/pacman/db.lck" ];then
			rm /var/lib/pacman/db.lck
	fi
}

install_AUR_helper(){
	[ -f "${installer_phases}/install_AUR_helper" ] && return
	clean_pacman_db_locl_file  
	true
	
	show_im "Updating your system..."
	pacman -Syu --noconfirm
	
	show_im "Installing git base-devel archlinux-keyring..."
	pacman -Syu --needed git base-devel archlinux-keyring

    if ! command_exist yay && ! command_exist paru; then
    	pacman --noconfirm -Syu
    	for package in yay yay-bin yay-git;do
    		pacman -Si $package 2>/dev/null | grep -q "/$package " && yay_package_name="$package"
    		break
    	done
        if [ -n "$yay_package_name" ];then
        	show_im "Installing yay as AUR helper..."
        	pacman --noconfirm -Syu $yay_package_name
        else
        	show_im "installing yay..."
        	temp_yay_bin="/tmp/temp_yay"
        	if [ ! -f "$temp_yay_bin" ];then
        		temp_yay_dir="/tmp/yay-bin"
        		[ -d "$temp_yay_dir" ] && rm -rdf "$temp_yay_dir"
        		mkdir -p "$temp_yay_dir"
        		if [ -z "$yay_ver" ];then
					yay_ver="latest"
				else
					yay_ver="tags/v${yay_ver}"
				fi
				yay_github_api_url="https://api.github.com/repos/Jguer/yay/releases/$yay_ver"
				yay_github_api_url="https://api.github.com/repos/Jguer/yay/releases/$yay_ver"
        		if command -v curl >/dev/null;then
					  case "$(uname -m)" in
						x86_64)  ARCH="x86_64" ;;
						aarch64) ARCH="aarch64"			  ;;
						armv7*)  ARCH="armv7h"					  ;;
					  esac
					url2downloadyay="$(curl -fsSL "$yay_github_api_url" | grep -oP '(?<=browser_download_url": ")[^"]*' | grep "${ARCH}.tar.gz")"
					curl -fSLo "${temp_yay_dir}/yay_bin.tar.gz" "${url2downloadyay}" --progress-bar
				elif command -v wget >/dev/null;then
					url2downloadyay="$(wget -qO- "https://api.github.com/repos/Jguer/yay/releases/latest" | grep -oP '(?<=browser_download_url": ")[^"]*' | grep "x86_64.tar.gz")"
					wget -q --show-progress -O "${temp_yay_dir}/yay_bin.tar.gz" "${url2downloadyay}"
				fi
				( cd "$temp_yay_dir" && tar -xzf yay_bin.tar.gz && rm -rf yay_bin.tar.gz && mv yay_*/yay "${temp_yay_bin}")
				[ -d "$temp_yay_dir" ] && rm -rdf "$temp_yay_dir"
			fi
			"${temp_yay_bin}" --noconfirm -Syu yay
        fi
    fi
    
    if command_exist yay; then
    	show_sm "swtiching to yay..."
        PACKAGER="yay"
    elif command_exist paru; then
    	show_sm "swtiching to paru..."
        PACKAGER="paru"
    fi
	touch "${installer_phases}/install_AUR_helper"
}

create_package_list(){
	clean_pacman_db_locl_file
    if [ ! -f "${list_of_apps_file_path}" ]; then
        show_im "Creating package list..."
        pacman -Ss > "${list_of_apps_file_path}"
    fi
    
    if [ ! -f "${list_of_installed_apps_file_path}" ];then
		show_im "Creating installed package list..."
		${PACKAGER} -Q 2>/dev/null > "${list_of_installed_apps_file_path}"
	fi
}

install_packages(){
	clean_pacman_db_locl_file
	single_package_to_install="${1:-}"
	if [ -n "${single_package_to_install}" ];then
		pacman --noconfirm -Syu ${single_package_to_install}
		return
	fi
	
	if [ -n "${packages_to_install_AUR}" ];then
    	su - $__USER -c "${PACKAGER} --noconfirm -Syu ${packages_to_install_AUR}"
    else
    	show_wm_only "packages_to_install_AUR are empty"
    fi
    
    if [ -n "${packages_to_install_pacman}" ];then
    	pacman --noconfirm -Syu ${packages_to_install_pacman}
    else
    	show_wm_only "packages_to_install_pacman are empty"
    fi
    
    sleep 1
}

install_single_package(){
	single_package="${1:-}"
	if [ -n "${single_package}" ];then
		clean_pacman_db_locl_file
    	pacman --noconfirm -Syu ${single_package_to_install}
    else
    	show_wm "faile to install $single_package"
    	sleep 1
    fi
}

add_packages_2_install_list(){
	localarray="$@"
	for INDEX in ${localarray};do
    	if ! package_installed "${INDEX}";then
        	if grep -q "^${INDEX} " "${list_of_apps_file_path}";then
            	packages_to_install_pacman="$packages_to_install_pacman $INDEX"
            	Packages_2_install="$Packages_2_install $INDEX"
            	echo "$INDEX added to install list."
        	elif ${PACKAGER} -Si "${INDEX}" >/dev/null 2>&1;then
            	packages_to_install_AUR="$packages_to_install_AUR $INDEX"
            	Packages_2_install="$Packages_2_install $INDEX"
            	echo "$INDEX added to install list."
            else
				show_filed_2_add_pakage_m "${INDEX} does not exist." 
        	fi
        fi
    done
}

upgrade_now(){
	clean_pacman_db_locl_file
	pacman --noconfirm -Sy archlinux-keyring
    pacman -Syu --noconfirm
}

remove_packages()
{
	packages="$@"
	if [ -n "$packages" ];then
		show_im "Removing ${packages}."
		${__remove_package} "$package"
	else
		show_wm_only "no packages to remove."
	fi
}

run_autoclean(){
	show_im "run autoremove autoclean."
	clean_pacman_db_locl_file
	pacman -Sc --noconfirm
	remove_packages "$(pacman -Qtdq)" > /dev/null || true
}

run_package_manager_autoclean(){
	show_im "autoremove unwanted pakages"
	run_autoclean            
    if [ -d /var/tmp ]; then
        find /var/tmp -type f -atime +5 -delete
    fi
    
    if [ -d /var/log ]; then
        find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;
    fi
	if [ "$init_system_are" = "systemd" ]; then
        journalctl --vacuum-time=3d
    fi
}

_unattended_upgrades_()
{
	:
}

install_lightdm_now(){
	install_lightdm_="lightdm lightdm-gtk-greeter-settings"
	add_packages_2_install_list "${install_lightdm_}"
}

switch_lightdm_now(){
	[ -f "${installer_phases}/switch_lightdm_now" ] && return
    show_im "Switching to lightdm..."
    
    if [ -f "/etc/X11/default-display-manager" ]; then
        d_d_m="$(basename "$(cat /etc/X11/default-display-manager)")"
        [ "$d_d_m" != "lightdm" ] && lightdm_does_not_exist=true
    else
        lightdm_does_not_exist=true
    fi
    
    if [ "$lightdm_does_not_exist" = true ]; then
        echo "/usr/sbin/lightdm" | tee /etc/X11/default-display-manager > /dev/null 2>&1
        systemctl enable lightdm
    else
        show_sm "LightDM already exists."
    fi
    touch "${installer_phases}/switch_lightdm_now"
}

updating_rate_mirrors(){
	[ -f "${installer_phases}/updating_rate_mirrors" ] && return
	show_sm "updating rate-mirrors..."
	clean_pacman_db_locl_file
	if ! command_exist rate-mirrors;then
		pacman --noconfirm -S rate-mirrors-bin
	else
		show_wm "failed to update rate-mirrors..."
		return
	fi
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    rate-mirrors --top-mirrors-number-to-retest=5 --disable-comments --save /etc/pacman.d/mirrorlist --allow-root arch || show_wm "failed to update rate-mirrors..."
    touch "${installer_phases}/updating_rate_mirrors"
}

package_installed(){
	package="${1:-}"
	if grep -q "^$package" "$list_of_installed_apps_file_path";then
		return 0
	else
		return 1
	fi
}

must_install_apps()
{
	[ -f "${installer_phases}/must_install_apps" ] && return
	show_m "installing req apps"
	install_single_package "git"
	touch "${installer_phases}/must_install_apps"
}

pre_package_manager_(){
	[ -f "${installer_phases}/pre_package_manager_" ] && return
    install_AUR_helper
    updating_rate_mirrors
    touch "${installer_phases}/pre_package_manager_"
}

enable_repo(){   :; }
