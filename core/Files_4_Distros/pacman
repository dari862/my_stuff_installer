#!/bin/sh -e
network_manager_app_from_Files_4_Distros="networkmanager"

__remove_package="pacman -Rns --noconfirm"
packages_to_install=""

########################################################
# aur
########################################################
_temp_user="aurtempuser"
yay_ver="12.5.0"
_temp_user="aurtempuser"
temp_yay_bin="/home/$_temp_user/temp_yay"
temp_yay_command="${temp_yay_bin} --noconfirm -Sy"
packages_to_install_AUR=""
use_aur=true

yay_env_installer_script_path="$current_user_home/yay_installer"

command_exist() {
	if command -v $1 > /dev/null 2>&1;then
		return
	else
		return 1
	fi
}

create_auruser(){
	useradd -m "${_temp_user}"
	usermod -s /bin/sh "${_temp_user}"
	PASSWORD=$(openssl rand -base64 48)
	printf "%s:%s" "${_temp_user}" "$PASSWORD" | chpasswd
	passwd -l "${_temp_user}"
	PASSWORD=""

	if command_exist sudo;then
		printf "%s ALL=(ALL) NOPASSWD: ALL" "${_temp_user}" | tee "/etc/sudoers.d/${_temp_user}" >/dev/null 2>&1
		chmod 440 "/etc/sudoers.d/${_temp_user}"
	fi

	if command_exist doas;then
		printf "permit nopass %s" "${_temp_user}" | tee -a /etc/doas.conf >/dev/null 2>&1
	fi
}

aur_command_single_install(){
	package_name="${1:-}"
	if ! command_exist "${package_name}";then
		if su - "$_temp_user" -c "${temp_yay_command} ${package_name}";then
			return
		else
			return 1
		fi
	fi
}

aur_command_check(){
	if su - "$_temp_user" -c "${temp_yay_bin} -Si $1 >/dev/null 2>&1";then
		return
	else
		return 1
	fi
}

install_AUR_helper(){
	[ -f "${installer_phases}/install_AUR_helper" ] && return
	if [ -f "/var/lib/pacman/db.lck" ];then
		rm /var/lib/pacman/db.lck
	fi  
	
	if [ ! -f "$temp_yay_bin" ] || ! command_exist yay;then
		show_im "installing yay..."
		temp_yay_dir="/tmp/yay-bin"
		[ -d "$temp_yay_dir" ] && rm -rdf "$temp_yay_dir" || :
		mkdir -p "$temp_yay_dir"
		if [ -z "$yay_ver" ];then
			yay_ver="latest"
		else
			yay_ver="tags/v${yay_ver}"
		fi
		yay_github_api_url="https://api.github.com/repos/Jguer/yay/releases/$yay_ver"
		if [ "$url_package" = "curl" ];then
			case "$(uname -m)" in
				x86_64)  ARCH="x86_64" ;;
				aarch64) ARCH="aarch64";;
				armv7*)  ARCH="armv7h" ;;
			esac
			url2downloadyay="$(curl -fsSL "$yay_github_api_url" | grep -oP '(?<=browser_download_url": ")[^"]*' | grep "${ARCH}.tar.gz")"
			curl -fSLo "${temp_yay_dir}/yay_bin.tar.gz" "${url2downloadyay}" --progress-bar
			curl 'https://aur.archlinux.org/' >/dev/null || use_aur=false
		elif [ "$url_package" = "wget" ];then
			url2downloadyay="$(wget -qO- "https://api.github.com/repos/Jguer/yay/releases/latest" | grep -oP '(?<=browser_download_url": ")[^"]*' | grep "x86_64.tar.gz")"
			wget -q --show-progress -O "${temp_yay_dir}/yay_bin.tar.gz" "${url2downloadyay}"
			wget -O- 'https://aur.archlinux.org/' >/dev/null || use_aur=false
		fi
		echo "use_aur=\"$use_aur\"" >> "${save_value_file}"
		if [  "$use_aur" = true ];then
			if ! id "${_temp_user}" >/dev/null 2>&1;then
				create_auruser
			fi
			( cd "$temp_yay_dir" && tar -xzf yay_bin.tar.gz && rm -rf yay_bin.tar.gz && mv yay_*/yay "${temp_yay_bin}")
			[ -d "$temp_yay_dir" ] && rm -rdf "$temp_yay_dir"
			aur_command_single_install yay
		fi
	fi
	touch "${installer_phases}/install_AUR_helper"
}

updating_rate_mirrors(){
	[ -f "${installer_phases}/updating_rate_mirrors" ] && return
	show_sm "updating rate-mirrors..."
	if ! command_exist rate-mirrors;then
		if ! aur_command_single_install rate-mirrors-bin;then
			show_wm "failed to update rate-mirrors..."
			return
		fi
	fi
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    rate-mirrors --top-mirrors-number-to-retest=5 --disable-comments --save /etc/pacman.d/mirrorlist --allow-root arch || show_wm "failed to update rate-mirrors..."
    touch "${installer_phases}/updating_rate_mirrors"
}

aur_command_install_all(){
	if [ -n "${packages_to_install_AUR}" ];then
		for aurpackage in ${packages_to_install_AUR};do
			aur_command_single_install "$aurpackage" || show_wm "failed to install from aur: $aurpackage"
		done
	else
		show_wm_only "packages_to_install_AUR are empty"
	fi
}

delete_auruser(){
	if [ -f "/etc/doas.conf" ];then
		if grep -q "permit nopass ${_temp_user}" /etc/doas.conf;then
			sed -i "/permit nopass ${_temp_user}/d" /etc/doas.conf
		fi
	fi
	
	if [ -f "/etc/sudoers.d/${_temp_user}" ];then
		rm -f "/etc/sudoers.d/${_temp_user}"
	fi
	
	if id "$_temp_user" >/dev/null 2>&1; then
		userdel -r "$_temp_user"
	fi
}

# main aur
install_aur_and_all_needed_packages(){
	install_AUR_helper
	if [  "$use_aur" = false ];then
		show_wm "failed to run yay aur"
		show_wm "######################"
		show_wm "failed to install: yay"
		show_wm "failed to install: rate-mirrors"
		show_wm "failed to run: cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak"
		show_wm "failed to run: rate-mirrors --top-mirrors-number-to-retest=5 --disable-comments --save /etc/pacman.d/mirrorlist --allow-root arch"
		show_wm "failed to install: ${packages_to_install_AUR}"
		show_wm "######################"
		show_wm "# you can do above by running ${yay_env_installer_script_path}"
		show_wm "######################"
		
		echo '#!/bin/sh -e' > "${yay_env_installer_script_path}"
		if [ "$url_package" = "curl" ];then
			tee -a "${yay_env_installer_script_path}" <<- EOF >/dev/null 2>&1
			curl -fSLo "${temp_yay_dir}/yay_bin.tar.gz" "${url2downloadyay}" --progress-bar
			curl 'https://aur.archlinux.org/' >/dev/null || :
			EOF
		elif [ "$url_package" = "wget" ];then
			tee -a "${yay_env_installer_script_path}" <<- EOF >/dev/null 2>&1
			wget -q --show-progress -O "${temp_yay_dir}/yay_bin.tar.gz" "${url2downloadyay}"
			wget -O- 'https://aur.archlinux.org/' >/dev/null || :
			EOF
		fi
		tee -a "${yay_env_installer_script_path}" <<- EOF >/dev/null 2>&1
		( cd "$temp_yay_dir" && tar -xzf yay_bin.tar.gz && rm -rf yay_bin.tar.gz && mv yay_*/yay "${temp_yay_bin}")
		[ -d "$temp_yay_dir" ] && rm -rdf "$temp_yay_dir"
		${temp_yay_command} yay
		${temp_yay_command} rate-mirrors-bin
		cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    	rate-mirrors --top-mirrors-number-to-retest=5 --disable-comments --save /etc/pacman.d/mirrorlist --allow-root arch
    	: > \$HOME/failed_2_install_from_aur
    	for aurpackage in ${packages_to_install_AUR};do
			${temp_yay_command} "\$aurpackage" || echo "failed to install from aur: \$aurpackage" >> \$HOME/failed_2_install_from_aur
		done
		EOF
		chmod +x "${yay_env_installer_script_path}"
		return
	fi
	updating_rate_mirrors
	aur_command_install_all
	if id "${_temp_user}" >/dev/null 2>&1;then
		delete_auruser
	fi
}

######################################################################

clean_pacman_db_locl_file(){
	if [ -f "/var/lib/pacman/db.lck" ];then
		rm /var/lib/pacman/db.lck
	fi
}

create_package_list(){
	clean_pacman_db_locl_file
    if [ ! -f "${list_of_apps_file_path}" ]; then
        show_im "Creating package list..."
        pacman -Sl | awk '{print $2 " " $NF}' > "${list_of_apps_file_path}"
    fi
    
    if [ ! -f "${list_of_installed_apps_file_path}" ];then
		show_im "Creating installed package list..."
		pacman -Q 2>/dev/null > "${list_of_installed_apps_file_path}"
	fi
}

install_packages(){
	clean_pacman_db_locl_file
	packages_to_install="${1:-}"
	if [ -n "$packages_to_install" ];then
		if package_installed "${packages_to_install}";then
			return
		fi
	else
		packages_to_install="${all_Packages_to_install}"
	fi
	List_of_installed_packages_="${List_of_installed_packages_} ${packages_to_install}"
	if [ -n "${packages_to_install}" ];then
    	(pacman --noconfirm -Syu ${packages_to_install} && kill_package_ pacman) || \
		(pacman --noconfirm -Syu ${packages_to_install} && kill_package_ pacman) || \
		pacman --noconfirm -Syu ${packages_to_install}
    else
    	show_wm_only "all_Packages_to_install are empty"
    	return
    fi
}

add_packages_2_install_list(){
	localarray="$@"
	for INDEX in ${localarray};do
    	if ! package_installed "${INDEX}";then
        	if grep -q "^${INDEX} " "${list_of_apps_file_path}";then
            	all_Packages_to_install="$all_Packages_to_install $INDEX"
            	echo "$INDEX added to install list."
        	else
            	packages_to_install_AUR="$packages_to_install_AUR $INDEX"
            	echo "$INDEX added to install list."
        	fi
        fi
    done
}

upgrade_now(){
	clean_pacman_db_locl_file
	pacman --noconfirm -Sy archlinux-keyring
    pacman -Syu --noconfirm
}

remove_packages()
{
	packages="$@"
	if [ -n "$packages" ];then
		show_im "Removing ${packages}."
		${__remove_package} "$package"
	else
		show_wm_only "no packages to remove."
	fi
}

run_autoclean(){
	show_im "run autoremove autoclean."
	clean_pacman_db_locl_file
	pacman -Sc --noconfirm
	remove_packages "$(pacman -Qtdq)" > /dev/null || true
}

run_package_manager_autoclean(){
	show_im "autoremove unwanted pakages"
	run_autoclean            
    if [ -d /var/tmp ]; then
        find /var/tmp -type f -atime +5 -delete
    fi
    
    if [ -d /var/log ]; then
        find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;
    fi
	if [ "$init_system_are" = "systemd" ]; then
        journalctl --vacuum-time=3d
    fi
}

_unattended_upgrades_()
{
	:
}

install_lightdm_now(){
	install_lightdm_="lightdm lightdm-gtk-greeter-settings"
	add_packages_2_install_list "${install_lightdm_}"
}

switch_lightdm_now(){
	[ -f "${installer_phases}/switch_lightdm_now" ] && return
    show_im "Switching to lightdm..."
    
    if [ -f "/etc/X11/default-display-manager" ]; then
        d_d_m="$(basename "$(cat /etc/X11/default-display-manager)")"
        [ "$d_d_m" != "lightdm" ] && lightdm_does_not_exist=true
    else
        lightdm_does_not_exist=true
    fi
    
    if [ "$lightdm_does_not_exist" = true ]; then
        echo "/usr/sbin/lightdm" | tee /etc/X11/default-display-manager > /dev/null 2>&1
        systemctl enable lightdm
    else
        show_sm "LightDM already exists."
    fi
    touch "${installer_phases}/switch_lightdm_now"
}

package_installed(){
	package="${1:-}"
	if grep -q "^$package " "$list_of_installed_apps_file_path";then
		return 0
	else
		return 1
	fi
}

must_install_apps()
{
	[ -f "${installer_phases}/must_install_apps" ] && return
	show_m "installing req apps"
	install_packages "git"
	touch "${installer_phases}/must_install_apps"
}

pre_package_manager_(){
	[ -f "${installer_phases}/pre_package_manager_" ] && return
    
    touch "${installer_phases}/pre_package_manager_"
}

enable_repo(){   :; }
