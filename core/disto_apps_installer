#!/bin/sh
must_purge_first(){
	show_im "purging apps"
	for package in ${must_purge};do
		if package_installed "$package";then
			must_purge_first="$must_purge $package"
		else
			show_wm_only "$package does not exist"
		fi
	done
	remove_packages "${must_purge_first}"
	run_autoclean
}

pre_disto_apps_installer(){
	. "${prompt_to_install_value_file}"
	install_for_scripts="$install_for_scripts1 $install_for_scripts2"	
	install_common_for_scripts="$install_common_for_scripts1 $install_common_for_scripts2"
	
	show_im "Adding needed packages to install list."
	##################################################################################
	# main
	##################################################################################
	if [ "$install_wayland" = "true" ];then
		:
	fi
	
	if [ "$install_sudo" = "true" ];then
		add_packages_2_install_list "sudo"
	fi
	
	if [ "$install_X11" = "true" ];then
		add_packages_2_install_list "${install_X11_apps} ${install_common_X11_apps}"
		add_packages_2_install_list "${install_res_apps_for_X11} ${install_common_res_apps_for_X11}"
		add_packages_2_install_list "${install_must_have_apps_for_X11} ${install_common_must_have_apps_for_X11}"
		add_packages_2_install_list "${install_locker_app_for_X11} ${install_common_locker_app_for_X11}"
		add_packages_2_install_list "${install_conky_all_app} ${install_common_conky_all_app}"
		add_packages_2_install_list "${install_openbox_} ${install_common_openbox_}"
		add_packages_2_install_list "${install_themes_tools_for_X11} ${install_common_themes_tools_for_X11}"
		add_packages_2_install_list "${install_for_x11_scripts} ${install_common_for_x11_scripts}"
		add_packages_2_install_list "${install_clipman_manager_for_X11} ${install_common_clipman_manager_for_X11}"
		add_packages_2_install_list "${install_passman} ${install_common_passman}"
		if [ "$machine_type_are" = "laptop" ];then
			add_packages_2_install_list "${install_if_laptop_apps_x11} ${install_common_if_laptop_apps_x11}"
		fi
		if [ "$install_polybar" = "polybar" ];then
			add_packages_2_install_list "${install_polybar} ${install_common_polybar}"
		fi
		if [ "$install_bspwm" = true ];then
			add_packages_2_install_list "${install_apps_for_bspwm} ${install_common_apps_for_bspwm}"
		fi
		if [ "$install_dwm" = true ];then
			add_packages_2_install_list "${install_apps_for_dwm} ${install_common_apps_for_dwm}"
		fi
		if [ "$install_jgmenu" = "jgmenu" ];then
			add_packages_2_install_list "${install_jgmenu} ${install_common_jgmenu}"
		fi
	fi
	
	if lsmod | grep -q ip_tables;then
		add_packages_2_install_list "${install_ufw_apps} ${install_common_ufw_apps}"
	else
		failed_2_install_ufw=true
	fi
	
	if [ "$machine_type_are" = "laptop" ];then
		add_packages_2_install_list "${install_if_laptop_apps} ${install_common_if_laptop_apps}"
	fi
	add_packages_2_install_list "${install_must_have_apps} ${install_common_must_have_apps}"
	add_packages_2_install_list "${install_must_have_apps2} ${install_common_must_have_apps2}"
	add_packages_2_install_list "${install_terminal} ${install_common_terminal}"
	add_packages_2_install_list "${install_files_manager_support_app} ${install_common_files_manager_support_app}"
	add_packages_2_install_list "${install_firefox_} ${install_common_firefox_}"
	add_packages_2_install_list "${install_cli_sound_app} ${install_common_cli_sound_app}"
	add_packages_2_install_list "${install_MIDI_sound_app} ${install_common_MIDI_sound_app}"
	add_packages_2_install_list "${install_text_editer_app} ${install_common_text_editer_app}"
	add_packages_2_install_list "${install_mediaplayer_app} ${install_common_mediaplayer_app}"
	add_packages_2_install_list "${install_for_scripts} ${install_common_for_scripts}"
	add_packages_2_install_list "${install_image_viewer_apps} ${install_common_image_viewer_apps}"
	add_packages_2_install_list "${install_polkit_apps} ${install_common_polkit_apps}"
	add_packages_2_install_list "${install_fonts}"
	add_packages_2_install_list "${install_better_bash} ${install_common_better_bash}"
	add_packages_2_install_list "${install_better_shell} ${install_common_better_shell}"

	if [ "$thunar_files_manager" = true ];then
		add_packages_2_install_list "${install_files_manager_thunar} ${install_common_files_manager_thunar}"
	elif [ "$pcmanfm_files_manager" = true ];then
		add_packages_2_install_list "${install_files_manager_pcmanfm} ${install_common_files_manager_pcmanfm}"
	fi

	if [ "$install_zsh_now" = "zsh_default" ] || [ "$install_zsh_now" = "zsh" ];then
		add_packages_2_install_list "${install_zsh} ${install_common_zsh}"
	fi

	if [ "$install_extra_now" = "extra" ];then
		add_packages_2_install_list "${install_extra_apps} ${install_common_extra_apps}"
	fi
}

post_disto_apps_installer(){
	[ -f "${installer_phases}/post_disto_apps_installer" ] && return
	. "${prompt_to_install_value_file}"
	show_im "Configer packages."
	
	if [ "$install_zsh_now" = "zsh_default" ];then
		show_im "make zsh default shell "
		chsh -s $(command_exist zsh) $__USER
	fi
	if command_exist batcat && ! command_exist bat;then
		ln -sf $(which batcat) /usr/bin/bat
	fi
	if command_exist mpd;then
		if [ -n "$(pidof mpd)" ];then
			kill_package_ mpd
		fi
		
		service_manager stop mpd.socket || show_wm_only "failed to stop mpd.socket"
		service_manager stop mpd.service || show_wm_only "failed to stop mpd.service"
		service_manager disable mpd.socket || show_wm_only "failed to disable mpd.socket"
		service_manager disable mpd.service || show_wm_only "failed to disable mpd.service"
	fi
	
	if [ "$machine_type_are" = "laptop" ];then
		show_im "some config"
		if [ "$has_bluetooth" = true ];then
			[ -f "/etc/tlp.conf" ] && sed -i "s/#DEVICES_TO_DISABLE_ON_STARTUP=.*/DEVICES_TO_DISABLE_ON_STARTUP=\"bluetooth\"/g" /etc/tlp.conf
		fi
		
		service_manager mask rfkill || show_wm_only "failed to mask rfkill"
		service_manager mask systemd-rfkill.service || show_wm_only "failed to mask systemd-rfkill.service"
		service_manager mask systemd-rfkill.socket  || show_wm_only "failed to mask systemd-rfkill.socket"
		service_manager enable tlp || show_wm_only "failed to enable tlp"
		
		tlp start || tlp_error="true"
		if [ "$tlp_error" = "true" ];then
			 tlp start | grep '>>> Invoke' >> "${all_temp_path}"/tlp_error_Invoke
			if [ -f "${all_temp_path}/tlp_error_Invoke" ];then
				sed -i "s/' to correct this.//g" "${all_temp_path}"/tlp_error_Invoke
				sed -i "s/>>> Invoke '//g" "${all_temp_path}"/tlp_error_Invoke
				. "${all_temp_path}"/tlp_error_Invoke
				 tlp start
			fi
			if tlp-stat |  grep '* Install' >/dev/null 2>&1 ;then
				tlp-stat |  grep '* Install' | awk -F' '  '{print "add_packages_2_install_list " $3}' >> "${all_temp_path}"/tlp_install_exta_apps
				if [ -f "${all_temp_path}/tlp_install_exta_apps" ];then
					. "${all_temp_path}"/tlp_install_exta_apps
					install_packages
				fi
			fi
		fi
	fi

	if command_exist ufw;then
		show_im "Disableing (UFW)"
		ufw disable >/dev/null 2>&1
				
		if package_installed openssh;then
			show_im "Limiting port 22/tcp (UFW)"
    		ufw limit 22/tcp || show_wm "Failed to limiting port 22/tcp (UFW)"
    		
		fi
		
		show_im "Allow out port DNS 53 (UFW)"
		ufw allow out 53 || show_wm "Failed to allow out port DNS 53 (UFW)"
    	
    	show_im "Allow out port 80/tcp (UFW)"
    	ufw allow out 80/tcp || show_wm "Failed to allow out port 80/tcp (UFW)"
    	
		show_im "Allow out port 443/tcp (UFW)"
    	ufw allow out 443/tcp || show_wm "Failed to allow out port 443/tcp (UFW)"
    	
		show_im "Allow out port NTP 123 (UFW)"
		ufw allow out 123 || show_wm "Failed to allow out port NTP 123 (UFW)"
    	
    	show_im "Denying Incoming Packets by Default(UFW)"
    	ufw default deny incoming || show_wm "Failed to denying Incoming Packets by Default(UFW)"
    	
		show_im "Allowing Outcoming Packets by Default(UFW)"
    	ufw default allow outgoing || show_wm "Failed to allowing Outcoming Packets by Default(UFW)"
    	
		show_im "Enabled Firewall with Baselines!"
    	ufw --force enable || show_wm "Failed to enabled Firewall with Baselines!"
    	
    	show_im "Enable Firewall logging"
		ufw logging on || show_wm "Failed to enable Firewall logging"
	fi
	touch "${installer_phases}/post_disto_apps_installer"
}

install_ads_block_for_firefox(){
	[ -f "${installer_phases}/install_ads_block_for_firefox" ] && return
	show_im "Downloading uBlock to firefox."
	ads_block_api_contant="$(get_url_content "https://api.github.com/repos/gorhill/uBlock/releases/latest")"
	ads_block_url="$(echo "$ads_block_api_contant" | grep -oP '(?<=browser_download_url": ")[^"]*' | grep firefox)"
	if [ -z "$ads_block_url" ];then
		show_wm "Skipping install of uBlock to firefox failed to get browser_download_url."
	else
		ads_block_name="$(echo "$ads_block_api_contant" | grep -oP '(?<=name": ")[^"]*' | grep firefox)"
		ads_block_tmp_path="/tmp/ads_block"
		ads_block_downloaded_tmp_path="${ads_block_tmp_path}/${ads_block_name}"
		ads_block_contant_tmp_path="${ads_block_tmp_path}/ads_block_contant"
				
		mkdir -p "${ads_block_contant_tmp_path}"
		
		download_file "${ads_block_url}" "${ads_block_tmp_path}/${ads_block_name}"
		unzip "${ads_block_downloaded_tmp_path}" -d "${ads_block_contant_tmp_path}" >/dev/null 2>&1
		
		ads_block_tmp_path="${ads_block_tmp_path}/$(grep -oP '(?<=id": ")[^"]*' "${ads_block_contant_tmp_path}/manifest.json").xpi"
		
		mv "${ads_block_downloaded_tmp_path}" "${ads_block_tmp_path}"
		
		for d in /home/*; do
			if [ -d "$d/.mozilla/firefox" ];then
				show_im "Installing uBlock to ($d) firefox."
				user_and_group=$(stat "$(dirname "$d/.config")" -c %u:%g)
				profiles="$(cat "$d/.mozilla/firefox/profiles.ini" | grep "Path=" | awk -F= '{print $2}')"
				for p in $profiles;do
					mkdir -p "$d/.mozilla/firefox/$p/extensions"
					cp -r "${ads_block_tmp_path}" "$d/.mozilla/firefox/$p/extensions"
				done
				chown -R "$user_and_group" "$d"
			else
				show_im "Skipping install of uBlock to ($d) firefox."
			fi
		done
	fi
	touch "${installer_phases}/install_ads_block_for_firefox"
}
